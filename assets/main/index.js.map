{"version":3,"sources":["assets/Script/Objects/Crate.ts","assets/Script/Levels/EndLevel.ts","assets/Script/Objects/Floor.ts","assets/Script/Global.ts","assets/Script/Main.ts","assets/Script/Utils/Music.ts","assets/Script/Objects/Player.ts","assets/Script/Smoke.ts","assets/Script/Objects/Spike.ts"],"names":["Player_1","require","Music_1","Global_1","Floor_1","_a","cc","_decorator","ccclass","Crate","property","_super","_this","apply","this","arguments","moveDirection","collisionLeft","collisionRight","collisionBottom","speedX","speedY","maxSpeedY","gravity","onGround","moveSfx","AudioSource","loadedObject","__extends","Crate_1","prototype","start","size","node","width","height","tag","clip","default","SFX","loop","onDestroy","isPlaying","stop","moveLoadedObjects","base","distance","forEach","x","collisionDirectionX","update","dt","isValid","play","Math","abs","y","onCollisionEnter","other","self","isDebug","console","info","otherAabb","world","aabb","selfAabb","selfPreAabb","preAabb","clone","Intersection","rectRect","xMin","xMax","yMax","yMin","log","push","playLandStone","onCollisionExit","__decorate","BoxCollider","exports","EndLevel","init","stopAllActions","opacity","name","runAction","fadeIn","parent","getChildByName","Component","Floor","Global","loadConfig","Promise","resolve","reject","loader","loadRes","err","jsonMap","config","json","loadANIMATIONS","all","loadSingleANIMATIONS","then","catch","animName","SpriteAtlas","atlas","frames","getSpriteFrames","initAnimation","ANIMATIONS","JOSH","AnimationClip","createWithSpriteFrames","wrapMode","WrapMode","Loop","ROSIE","HEART","loadBGM","loadResDir","AudioClip","BGM","_i","BGM_1","length","bgm","loadSFX","SFX_1","sfx","loadBACKGROUNDS","SpriteFrame","bgs","bgs_1","bg","BACKGROUNDS","getTexture","loadTIELSET","Texture2D","texture","TILESET","loadOBJECTS","objs","objs_1","obj","OBJECTS","loadWEATHERS","weathers","weathers_1","weather","WEATHERS","loadSavedLevel","savedLevel","sys","localStorage","getItem","undefined","defaultBGM","levelIndex","tutorialState","dead","reborn","nearHole","jumpOverHole","sawRosie","nearSpike","jumpOverSpike","Spike_1","Smoke_1","EndLevel_1","Main","windowLights","lampLights","lampLightTime","setActive","J2R","R2J","buttonLayer","active","director","getCollisionManager","enabled","enabledDrawBoundingBox","enabledDebugDraw","homeLayer","tieldMapLayer","objectsLayer","smokeLayer","hintLayer","endTitle","playBGM","bindTouchListener","bindButtonListener","goHome","initSelectLevel","initHeart","isRestart","loadScence","isExit","isVictory","isControled","x1","position","x2","scaleX","heartNode","setPosition","playKiss","state","getComponent","Animation","scheduleOnce","showEnd","indexOf","setItem","Label","string","levelsProperties","title","title2","duration","canJump","dist","sqrt","pow","on","Node","EventType","TOUCH_START","playSwitch","touch","getLocationX","_isControled","jump","TOUCH_MOVE","getStartLocation","getLocation","touchMoveThreshold","TOUCH_END","TOUCH_CANCEL","systemEvent","SystemEvent","KEY_DOWN","keyCode","macro","KEY","space","w","a","d","KEY_UP","isReload","unscheduleAllCallbacks","destroyAllChildren","map","loadObjects","initEnvironment","loadFloors","makeHouses","makeHills","makeTrees","makeGarbageCans","makeLamps","loadTiledMaps","schedule","updateWindowLights","updateLampLights","dir","children","show","buildFrame","weatherProperties","WEATHER","SHADING","TEX","addComponent","Sprite","addClip","addChild","floors_1","floors","rect","h","maps_1","Maps","tile","frame","setRect","tx","ty","i","Backgrounds","hasOwnProperty","positions_1","p","suffix","season","positions_2","positions_3","positions_4","anchorX","anchorY","spriteFrame","zIndex","positions_5","_b","windowOffsetByHouse","iterator","num","floor","random","light","cos","PI","Objects","objName","anim","key","box","playerName","obj_1","obj_2","Music","musicStatus","id","audioEngine","playMusic","playJump","player","playDie","playLandPlayer","playMove","getState","AudioState","PLAYING","STONE","Player","collisionRemain","Object","defineProperty","get","set","value","offset","v2","playAnim","jumpedY","pushedCrate","die","getAnimationState","otherPreAabb","index","splice","Smoke","title1","sequence","delayTime","fadeOut","text","_loop_1","this_1","charAt","Spike"],"mappings":"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","sourcesContent":["import Player from \"./Player\";\nimport Music from \"../Utils/Music\";\nimport Global from \"../Global\";\nimport Floor from \"./Floor\";\nconst {\n    ccclass,\n    property\n} = cc._decorator;\n@ccclass\nexport default class Crate extends cc.BoxCollider {\n    moveDirection: number = 0; //0 for stand, 1 for right ,-1 for left\n    collisionLeft: number = 0;\n    collisionRight: number = 0;\n    collisionBottom: number = 0;\n    speedX: number = 128; // right for positive\n    speedY: number = 0; // up for positive\n    maxSpeedY: number = 512;\n    gravity: number = 780;\n    onGround: boolean = true;\n    //pushedByNum: number = 0;\n    moveSfx = new cc.AudioSource();\n    loadedObject = []\n    start() {\n        this.size = cc.size(this.node.width, this.node.height);\n        this.tag = 0; //0:FLOOR,CRATE  1:PLAYER  2:SPIKE\n        this.moveSfx.clip = Global.SFX[\"MOVE_STONE\"];\n        this.moveSfx.loop = true;\n    }\n    onDestroy() {\n        if (this.moveSfx.isPlaying) {\n            this.moveSfx.stop();\n        }\n    }\n    moveLoadedObjects(base: Crate, distance: number) {\n        base.loadedObject.forEach(x => {\n            if (x instanceof Crate) {\n                if (this.moveDirection == 1 && x.collisionRight == 0 || this.moveDirection == -1 && x.collisionLeft == 0) {\n                    x.node.x += distance;\n                    // translation\n                    if (x.loadedObject) {\n                        this.moveLoadedObjects(x, distance);\n                    }\n                }\n            } else if (x instanceof Player) {\n                if (this.moveDirection != x.collisionDirectionX) {\n                    x.node.x += distance;\n                    // translation\n                }\n            }\n        })\n    }\n    update(dt) {\n        //console.log('pushedByNum: ', this.pushedByNum)\n        //只能一人推箱子时候才有效\n        if (!cc.isValid(this.node)) {\n            this.moveSfx.stop();\n        }\n        if (this.onGround) {\n            if (this.moveDirection != 0) {\n                if (this.moveDirection == -1 && !this.collisionLeft || this.moveDirection == 1 && !this.collisionRight) {\n                    this.node.x += this.moveDirection * this.speedX * dt; // translation\n                    this.moveLoadedObjects(this, this.moveDirection * this.speedX * dt)\n                    if (!this.moveSfx.isPlaying) {\n                        this.moveSfx.play();\n                    }\n                } else if (this.moveSfx.isPlaying) {\n                    this.moveSfx.stop();\n                }\n            } else if (this.moveDirection == 0) {\n                if (this.moveSfx.isPlaying) {\n                    this.moveSfx.stop();\n                }\n            }\n        } else {\n            if (this.moveSfx.isPlaying) {\n                this.moveSfx.stop();\n            }\n            if (Math.abs(this.speedY - this.gravity * dt) <= this.maxSpeedY) {\n                this.speedY -= this.gravity * dt;\n            } else {\n                this.speedY = -this.maxSpeedY\n            }\n            this.node.y += this.speedY * dt;\n        }\n    }\n\n    onCollisionEnter(other, self) {\n        switch (other.tag) { //0:FLOOR,CRATE  1:PLAYER  2:SPIKE\n            case 0:\n            case 1:\n                if(Global.isDebug){\n                    console.info(\"hit player\")\n                }\n                var otherAabb = other.world.aabb;\n                var selfAabb = self.world.aabb;\n                var selfPreAabb = self.world.preAabb.clone();\n                if (selfPreAabb.x == 0 && selfPreAabb.y == 0 && selfPreAabb.width == 0 && selfPreAabb.height == 0) {\n                    return;\n                }\n                // console.log(selfPreAabb.xMax);\n                selfPreAabb.x = selfAabb.x\n                //console.log(selfPreAabb.yMin, otherAabb.yMax);\n                //horizental collision\n                if (cc.Intersection.rectRect(selfPreAabb, otherAabb)) {\n                    selfPreAabb.x = self.world.preAabb.x\n                    if (this.moveDirection < 0 \n                        && selfPreAabb.xMin > otherAabb.xMax && selfAabb.yMax > otherAabb.yMin) {\n                        this.node.x += Math.abs(otherAabb.xMax - selfAabb.xMin);\n                        this.collisionLeft += 1;\n                        if(Global.isDebug){\n                            console.info(\"114\")\n                        }\n                    } else if (this.moveDirection > 0\n                        && selfPreAabb.xMax < otherAabb.xMin && selfAabb.yMax > otherAabb.yMin) {\n                        this.node.x -= Math.abs(selfAabb.xMax - otherAabb.xMin);\n                        this.collisionRight += 1;\n                        if(Global.isDebug){\n                            console.info(\"121\")\n                        }\n                    }\n                //console.log('撞右边墙-箱')\n                } else { \n                    //vertical collision\n                    console.log('129')\n                    selfPreAabb.x = self.world.preAabb.x\n                    if (selfPreAabb.xMin >= otherAabb.xMax || selfAabb.xMin >= otherAabb.xMax) {\n                        if(Global.isDebug){\n                            console.log(\"132\")\n                            console.log(\"撞左边墙-从空-箱\")\n                        }\n                        this.node.x += Math.abs(otherAabb.xMax - selfAabb.xMin);\n                        this.collisionLeft += 1\n                        //console.log(this.collisionLeft)\n                    } else if (selfPreAabb.xMax <= otherAabb.xMin || selfAabb.xMax <= otherAabb.xMin) {\n                        //console.log(\"撞右边墙-从空-箱\")\n                        this.node.x -= Math.abs(selfAabb.xMax - otherAabb.xMin);\n                        this.collisionRight += 1\n                    } else if (this.speedY < 0 && selfPreAabb.yMin > otherAabb.yMax\n                        //&& (selfPreAabb.xMin < otherAabb.xMax && selfPreAabb.xMax > otherAabb.xMin)\n                    ) {\n                        // console.log('落地')\n                        this.node.y += Math.abs(otherAabb.yMax - selfAabb.yMin);\n                        if (other instanceof Floor || other instanceof Crate) {\n                            this.onGround = true;\n                        }\n                        if (other instanceof Crate) {\n                            other.loadedObject.push(this)\n                        }\n                        this.speedY = 0\n                        if (other.tag == 0) {\n                            Music.playLandStone();\n                        }\n                    }\n                }\n        }\n    }\n    onCollisionExit(other, self) {\n        switch (other.tag) {\n            case 0:\n                var otherAabb = other.world.aabb;\n                //var otherPreAabb = other.world.preAabb.clone();\n                var selfAabb = self.world.aabb;\n                var selfPreAabb = self.world.preAabb.clone();\n                selfPreAabb.x = selfAabb.x\n                if (!cc.Intersection.rectRect(selfPreAabb, otherAabb)) //collision occurs on y-axis\n                {\n                    //console.log(selfPreAabb.yMin, otherAabb.yMax)\n                    if (selfAabb.yMin == otherAabb.yMax && this.onGround == true) // 箱子被推出地面，此事不允许再推，保持贴边落下\n                    {\n                        if (selfAabb.xMax < otherAabb.xMin) {\n                            this.node.x += otherAabb.xMin - selfAabb.xMax\n                            this.collisionRight += 1;\n                        } else if (otherAabb.xMax < selfAabb.xMin) {\n                            this.node.x -= selfAabb.xMin - otherAabb.xMax\n                            this.collisionLeft += 1;\n                        }\n                        this.onGround = false;\n                    }\n                } else {\n                    if (selfPreAabb.xMax <= otherAabb.xMin) {\n                        this.collisionRight -= 1;\n                    }\n                    if (selfPreAabb.xMin >= otherAabb.xMax) {\n                        this.collisionLeft -= 1;\n                    }\n                }\n                break;\n                //console.log('onground', this.onGround)\n            case 1:\n                break;\n        }\n    }\n}","const { ccclass, property } = cc._decorator;\n@ccclass\nexport default class EndLevel extends cc.Component {\n    init() {\n        this.node.stopAllActions();\n        this.node.opacity = 0\n        if (this.node.name == \"0\") {\n            this.node.runAction(cc.fadeIn(6))\n        }\n    }\n\n    onCollisionEnter(other, self) {\n        switch (self.node.name) {\n            case \"0\":\n                this.node.parent.getChildByName(\"1\").runAction(cc.fadeIn(3))\n                break;\n            case \"1\":\n                this.node.parent.getChildByName(\"2\").runAction(cc.fadeIn(3))\n                break;\n            case \"2\":\n                this.node.parent.getChildByName(\"3\").runAction(cc.fadeIn(3))\n                break;\n            case \"3\":\n                this.node.parent.getChildByName(\"4\").runAction(cc.fadeIn(3))\n                break;\n        }\n    }\n}","const { ccclass, property } = cc._decorator;\n@ccclass\nexport default class Floor extends cc.BoxCollider {\n    start() {\n        this.size = cc.size(this.node.width, this.node.height);\n        this.tag = 0 //0:FLOOR,CRATE  1:PLAYER  2:SPIKE\n    }\n\n    update() {\n        //console.log('floor')\n        //this.col\n    }\n\n    onCollisionEnter(other, self) {\n        //console.log(other);\n        //console.log(self);\n    }\n}","import Player from \"./Objects/Player\";\n\n//统一在这里访问资源，避免由于资源多处访问，且异步加载提前调用，导致的undefined问题\nexport default class Global {\n\n    static config: any;\n\n    static ANIMATIONS = {\n        JOSH: {},\n        ROSIE: {},\n        HEART: undefined\n    };\n\n    static JOSH: Player\n    static ROSIE: Player\n\n    static BGM = {};\n    static SFX = {};\n    static BACKGROUNDS = {};\n    static OBJECTS = {};\n    static WEATHERS = {};\n    static TILESET: cc.Texture2D;\n\n    static isVictory: boolean;\n    static isRestart: boolean;\n    static isExit: boolean;\n    static isDebug: boolean = false;\n\n    static defaultBGM = \"GOLDBERG\"\n\n    static loadConfig() {\n        return new Promise<void>((resolve, reject) => {\n            cc.loader.loadRes('config', (err, jsonMap: cc.JsonAsset) => {\n                if (err) {\n                    reject();\n                } else {\n                    this.config = jsonMap.json;\n                    resolve();\n                }\n            });\n        });\n    }\n\n    static loadANIMATIONS() {\n        return new Promise<void>((resolve, reject) => {\n            Promise.all([\n                this.loadSingleANIMATIONS(\"JOSH\"),\n                this.loadSingleANIMATIONS(\"ROSIE\"),\n                this.loadSingleANIMATIONS(\"HEART\"),\n            ]).then(() => {\n                resolve();\n            }).catch(() => reject())\n        })\n    }\n\n    private static loadSingleANIMATIONS(animName: string) {\n        return new Promise<void>((resolve, reject) => {\n            cc.loader.loadRes('Animations/' + animName, cc.SpriteAtlas, (err, atlas: cc.SpriteAtlas) => {\n                if (err) {\n                    reject(err);\n                } else {\n                    const frames = atlas.getSpriteFrames();\n                    this.initAnimation(animName, frames);\n                    resolve();\n                }\n            })\n        });\n    }\n\n    static initAnimation(animName: string, frames: cc.SpriteFrame[]) {\n        switch (animName) {\n            case \"JOSH\":\n                Global.ANIMATIONS.JOSH[\"animStand\"] = cc.AnimationClip.createWithSpriteFrames([frames[0], frames[1], frames[2]], 5);\n                Global.ANIMATIONS.JOSH[\"animStand\"].wrapMode = cc.WrapMode.Loop;\n                Global.ANIMATIONS.JOSH[\"animWalk\"] = cc.AnimationClip.createWithSpriteFrames([frames[3], frames[4], frames[5], frames[6], frames[7], frames[8], frames[9], frames[10]], 10);\n                Global.ANIMATIONS.JOSH[\"animWalk\"].wrapMode = cc.WrapMode.Loop;\n                Global.ANIMATIONS.JOSH[\"animPush\"] = cc.AnimationClip.createWithSpriteFrames([frames[11], frames[12], frames[13], frames[14], frames[15], frames[16]], 10);\n                Global.ANIMATIONS.JOSH[\"animPush\"].wrapMode = cc.WrapMode.Loop;\n                Global.ANIMATIONS.JOSH[\"animJump\"] = cc.AnimationClip.createWithSpriteFrames([frames[17], frames[18], frames[19]], 10);\n                Global.ANIMATIONS.JOSH[\"animJump\"].wrapMode = cc.WrapMode.Loop;\n                Global.ANIMATIONS.JOSH[\"animFall\"] = cc.AnimationClip.createWithSpriteFrames([frames[20], frames[21], frames[22]], 5);\n                Global.ANIMATIONS.JOSH[\"animFall\"].wrapMode = cc.WrapMode.Loop;\n                Global.ANIMATIONS.JOSH[\"animDie\"] = cc.AnimationClip.createWithSpriteFrames([frames[23], frames[24], frames[25], frames[26], frames[27], frames[28], frames[29]], 10);\n                Global.ANIMATIONS.JOSH[\"animPushStand\"] = cc.AnimationClip.createWithSpriteFrames([frames[11]], 10);\n                Global.ANIMATIONS.JOSH[\"animPushStand\"].wrapMode = cc.WrapMode.Loop;\n                break;\n            case \"ROSIE\":\n                Global.ANIMATIONS.ROSIE[\"animStand\"] = cc.AnimationClip.createWithSpriteFrames([frames[0], frames[1], frames[2]], 5);\n                Global.ANIMATIONS.ROSIE[\"animStand\"].wrapMode = cc.WrapMode.Loop;\n                Global.ANIMATIONS.ROSIE[\"animWalk\"] = cc.AnimationClip.createWithSpriteFrames([frames[3], frames[4], frames[5]], 10);\n                Global.ANIMATIONS.ROSIE[\"animWalk\"].wrapMode = cc.WrapMode.Loop;\n                Global.ANIMATIONS.ROSIE[\"animPush\"] = cc.AnimationClip.createWithSpriteFrames([frames[6], frames[7], frames[8]], 10);\n                Global.ANIMATIONS.ROSIE[\"animPush\"].wrapMode = cc.WrapMode.Loop;\n                Global.ANIMATIONS.ROSIE[\"animJump\"] = cc.AnimationClip.createWithSpriteFrames([frames[9], frames[10], frames[11]], 10);\n                Global.ANIMATIONS.ROSIE[\"animJump\"].wrapMode = cc.WrapMode.Loop;\n                Global.ANIMATIONS.ROSIE[\"animFall\"] = cc.AnimationClip.createWithSpriteFrames([frames[12], frames[13], frames[14]], 5);\n                Global.ANIMATIONS.ROSIE[\"animFall\"].wrapMode = cc.WrapMode.Loop;\n                Global.ANIMATIONS.ROSIE[\"animDie\"] = cc.AnimationClip.createWithSpriteFrames([frames[15], frames[16], frames[17], frames[18], frames[19], frames[20]], 10);\n                Global.ANIMATIONS.ROSIE[\"animPushStand\"] = cc.AnimationClip.createWithSpriteFrames([frames[6]], 10);\n                Global.ANIMATIONS.ROSIE[\"animPushStand\"].wrapMode = cc.WrapMode.Loop;\n                break;\n            case \"HEART\":\n                Global.ANIMATIONS.HEART = cc.AnimationClip.createWithSpriteFrames(frames, 10);\n        }\n    }\n\n    static loadBGM() {\n        return new Promise<void>((resolve, reject) => {\n            cc.loader.loadResDir('Audios/BGM', cc.AudioClip, (err, BGM: cc.AudioClip[]) => {\n                if (err) {\n                    reject();\n                } else {\n                    for (const bgm of BGM) {\n                        this.BGM[bgm.name] = bgm;\n                    }\n                    //console.log(this.BGM)\n                    resolve();\n                }\n            });\n        });\n    }\n\n    static loadSFX() {\n        return new Promise<void>((resolve, reject) => {\n            cc.loader.loadResDir('Audios/SFX', cc.AudioClip, (err, SFX: cc.AudioClip[]) => {\n                if (err) {\n                    reject();\n                } else {\n                    for (const sfx of SFX) {\n                        this.SFX[sfx.name] = sfx;\n                    }\n                    resolve();\n                }\n            });\n        });\n    }\n\n    static loadBACKGROUNDS() {\n        return new Promise<void>((resolve, reject) => {\n            cc.loader.loadResDir('Backgrounds', cc.SpriteFrame, (err, bgs: cc.SpriteFrame[]) => {\n                if (err) {\n                    reject();\n                } else {\n                    for (const bg of bgs) {\n                        this.BACKGROUNDS[bg.name] = new cc.SpriteFrame(bg.getTexture());\n                    }\n                    resolve();\n                }\n            });\n        });\n    }\n\n    static loadTIELSET() {\n        return new Promise<void>((resolve, reject) => {\n            cc.loader.loadRes('Maps/TILESET', cc.Texture2D, (err, texture: cc.Texture2D) => {\n                if (err) {\n                    console.log(err);\n                    reject();\n                } else {\n                    this.TILESET = texture;\n                    resolve();\n                }\n            });\n        });\n    }\n\n    static loadOBJECTS() {\n        return new Promise<void>((resolve, reject) => {\n            cc.loader.loadResDir('Objects', cc.SpriteFrame, (err, objs: cc.SpriteFrame[]) => {\n                if (err) {\n                    console.log(err);\n                    reject();\n                } else {\n                    for (const obj of objs) {\n                        this.OBJECTS[obj.name] = obj;\n                    }\n                    resolve();\n                }\n            });\n        });\n    }\n\n    static loadWEATHERS() {\n        return new Promise<void>((resolve, reject) => {\n            cc.loader.loadResDir('Weathers', cc.SpriteFrame, (err, weathers: cc.SpriteFrame[]) => {\n                if (err) {\n                    reject();\n                } else {\n                    for (const weather of weathers) {\n                        this.WEATHERS[weather.name] = weather;\n                    }\n                    resolve();\n                }\n            });\n        });\n    }\n\n    static loadSavedLevel() {\n        this.savedLevel = cc.sys.localStorage.getItem('level');\n    }\n\n    static levelIndex = 19;\n    static savedLevel: number;\n\n    static tutorialState = {\n        dead: false, reborn: false, nearHole: false, jumpOverHole: false, sawRosie: false, nearSpike: false, jumpOverSpike: false,\n        init: function () {\n            this.dead = false;\n            this.reborn = false;\n            this.nearHole = false;\n            this.jumpOverHole = false;\n            this.sawRosie = false;\n            this.nearSpike = false;\n            this.jumpOverSpike = false;\n        }\n    }\n}\n","const {ccclass, property} = cc._decorator;\nimport Global from './Global';\nimport Music from './Utils/Music'\nimport Player from './Objects/Player';\nimport Spike from './Objects/Spike';\nimport Crate from './Objects/Crate';\nimport Floor from './Objects/Floor';\nimport Smoke from './Smoke';\nimport EndLevel from './Levels/EndLevel';\n\n@ccclass\nexport default class Main extends cc.Component {\n\n    windowLights: cc.Node[] = [];\n    lampLights: cc.Node[] = [];\n    heartNode: cc.Node;\n    homeLayer: cc.Node;\n    tieldMapLayer: cc.Node;\n    objectsLayer: cc.Node;\n    smokeLayer: cc.Node;\n    buttonLayer: cc.Node;\n    hintLayer: cc.Node;\n    endTitle: cc.Node;\n    lampLightTime = 0;\n\n    setActive(J2R: boolean, R2J: boolean) {\n        this.buttonLayer.getChildByName('SWITCH_J2R').active = !J2R;\n        this.buttonLayer.getChildByName('SWITCH_R2J').active = !R2J;\n    }\n\n    start() {\n        cc.director.getCollisionManager().enabled = true;\n        if (Global.isDebug) {\n            cc.director.getCollisionManager().enabledDrawBoundingBox = true;\n            cc.director.getCollisionManager().enabledDebugDraw = true;\n        }\n\n        this.homeLayer = this.node.getChildByName('homeLayer')\n        this.tieldMapLayer = this.node.getChildByName('tieldMapLayer')\n        this.objectsLayer = this.node.getChildByName('objectsLayer')\n        this.smokeLayer = this.node.getChildByName('smokeLayer');\n        this.buttonLayer = this.node.getChildByName('buttonLayer');\n        this.hintLayer = this.node.getChildByName('hintLayer');\n        this.endTitle = this.node.getChildByName('endTitle');\n\n        //loadRes\n        Promise.all([\n            Global.loadConfig(),\n            Global.loadBGM(),\n            Global.loadANIMATIONS(),\n            Global.loadSFX(),\n            Global.loadBACKGROUNDS(),\n            Global.loadTIELSET(),\n            Global.loadOBJECTS(),\n            Global.loadWEATHERS()]).then(() => {\n            Global.loadSavedLevel();\n            Music.playBGM(\"GOLDBERG\");\n            this.bindTouchListener();\n            this.bindButtonListener();\n            this.goHome();\n            this.initSelectLevel();\n            this.initHeart();\n        })\n    }\n\n    update() {\n        //console.log(Global.ROSIE.moveDirection)\n        if (Global.isRestart) {\n            this.loadScence(true);\n            Global.isRestart = false;\n        }\n        if (Global.isExit) {\n            this.goHome();\n            Global.isExit = false;\n        } else if (Global.isVictory\n            && Global.JOSH.onGround && Global.ROSIE.onGround\n            && !Global.JOSH.dead && !Global.ROSIE.dead) {\n            Global.JOSH.isControled = false;\n            Global.ROSIE.isControled = false;\n            Global.JOSH.node.opacity = 255;\n            Global.ROSIE.node.opacity = 255;\n            Global.JOSH.moveDirection = 0;\n            Global.ROSIE.moveDirection = 0;\n\n            // face towards each other\n            let x1 = Global.JOSH.node.position.x;\n            let x2 = Global.ROSIE.node.position.x;\n            if (x1 > x2) {\n                Global.JOSH.node.scaleX = -1\n                Global.ROSIE.node.scaleX = 1\n            } else {\n                Global.JOSH.node.scaleX = 1\n                Global.ROSIE.node.scaleX = -1\n            }\n\n            this.heartNode.active = true;\n            this.heartNode.setPosition((x1 + x2) / 2, Global.JOSH.node.position.y + 20)\n            Music.playKiss();\n            let state = this.heartNode.getComponent(cc.Animation).play('heart');\n            this.scheduleOnce(() => {\n                if (Global.levelIndex >= 19) {\n                    this.tieldMapLayer.active = false;\n                    this.objectsLayer.active = false;\n                    this.hintLayer.active = false;\n                    this.buttonLayer.active = false;\n                    this.node.getChildByName('endTitle').active = false\n                    this.heartNode.active = false;\n                    this.smokeLayer.getComponent(Smoke).showEnd()\n                        .then(() => {\n                            this.buttonLayer.active = true;\n                            this.buttonLayer.getChildByName('RESTART').active = false;\n                        })\n                } else {\n                    Global.levelIndex++;\n                    if (Global.levelIndex > Global.savedLevel && [1, 4, 7, 10, 13, 15, 18, 19].indexOf(Global.levelIndex) >= 0) {\n                        cc.sys.localStorage.setItem('level', Global.levelIndex);\n                        Global.savedLevel = Global.levelIndex;\n                        switch (Global.levelIndex) {\n                            case 1:\n                                this.homeLayer.getChildByName('levels').getChildByName('I').getComponent(cc.Label).string = Global.config.levelsProperties[\"1\"].title;\n                                break;\n                            case 4:\n                                this.homeLayer.getChildByName('levels').getChildByName('II').getComponent(cc.Label).string = Global.config.levelsProperties[\"4\"].title;\n                                break;\n                            case 7:\n                                this.homeLayer.getChildByName('levels').getChildByName('III').getComponent(cc.Label).string = Global.config.levelsProperties[\"7\"].title;\n                                break;\n                            case 10:\n                                this.homeLayer.getChildByName('levels').getChildByName('IV').getComponent(cc.Label).string = Global.config.levelsProperties[\"10\"].title;\n                                break;\n                            case 13:\n                                this.homeLayer.getChildByName('levels').getChildByName('V').getComponent(cc.Label).string = Global.config.levelsProperties[\"13\"].title;\n                                break;\n                            case 15:\n                                this.homeLayer.getChildByName('levels').getChildByName('VI').getComponent(cc.Label).string = Global.config.levelsProperties[\"15\"].title;\n                                break;\n                            case 18:\n                                this.homeLayer.getChildByName('levels').getChildByName('VII').getComponent(cc.Label).string = Global.config.levelsProperties[\"18\"].title;\n                                break;\n                            case 19:\n                                this.homeLayer.getChildByName('levels').getChildByName('VIII').getComponent(cc.Label).string = Global.config.levelsProperties[\"19\"].title2;\n                                break;\n                        }\n                    }\n                    this.loadScence();\n                }\n\n            }, state.duration)\n            Global.isVictory = false;\n        } else if (Global.JOSH && Global.ROSIE && Global.JOSH.node && Global.ROSIE.node) {\n            switch (Global.levelIndex) {\n                case 0:\n                    //console.log(Global.JOSH.node.y)\n                    if (Global.ROSIE.node.x > 360 && !Global.tutorialState.jumpOverSpike) {\n                        Global.tutorialState.jumpOverSpike = true;\n                        this.hintLayer.getComponent(cc.Label).string = \"在这里，我们相爱了\";\n                    } else if (Global.ROSIE.node.x > 128 && !Global.tutorialState.nearSpike) {\n                        Global.tutorialState.nearSpike = true;\n                        this.hintLayer.getComponent(cc.Label).string = \"你可以跳过这些尖刺\";\n                    } else if (Global.JOSH.node.x > 512 && !Global.tutorialState.sawRosie) {\n                        Global.tutorialState.sawRosie = true;\n                        Global.ROSIE.node.active = true;\n                        Global.ROSIE.isControled = false;\n                        this.buttonLayer.getChildByName('SWITCH_J2R').active = true;\n                        this.hintLayer.getComponent(cc.Label).string = \"幸运的是，我遇见了你，你向我走来\";\n                    } else if (Global.JOSH.node.x > 320 && !Global.tutorialState.jumpOverHole) {\n                        Global.tutorialState.jumpOverHole = true;\n                        this.hintLayer.getComponent(cc.Label).string = \"我喜欢推这些箱子\";\n                    } else if (Global.tutorialState.reborn && Global.JOSH.node.x > 96 && Global.JOSH.node.y == -304 && !Global.tutorialState.nearHole) {\n                        Global.tutorialState.nearHole = true;\n                        this.hintLayer.getComponent(cc.Label).string = \"我学会跳跃，避免让自己受伤\";\n                    } else if (Global.tutorialState.dead && !Global.tutorialState.reborn) {\n                        Global.tutorialState.reborn = true;\n                        Global.JOSH.canJump = true;\n                        this.hintLayer.getComponent(cc.Label).string = \"不小心摔倒受了伤\";\n                    }\n                    break;\n                case 4:\n                case 5:\n                case 6:\n                    if (Math.abs(Global.JOSH.node.y - Global.ROSIE.node.y) < 1\n                        && Math.abs(Global.JOSH.node.x - Global.ROSIE.node.x) > 16) {\n                        Global.ROSIE.moveDirection = Global.JOSH.node.x > Global.ROSIE.node.x ? 1 : -1\n                    } else {\n                        Global.ROSIE.moveDirection = 0;\n                    }\n                    break;\n                case 18:\n                    let dist = Math.sqrt(Math.pow(Global.JOSH.node.x - Global.ROSIE.node.x, 2) + Math.pow(Global.JOSH.node.y - Global.ROSIE.node.y, 2));\n                    //console.log(dist)\n                    if (dist > 300) {\n                        this.tieldMapLayer.opacity = 0\n                    } else if (dist > 50) {\n                        this.tieldMapLayer.opacity = 128 * (1 - (dist - 50) / 250);\n                    } else {\n                        this.tieldMapLayer.opacity = 128 * (2 - dist / 50);\n                    }\n                    break;\n                default:\n                    this.tieldMapLayer.opacity = 255\n                    break;\n            }\n        }\n    }\n\n    goHome() {\n        this.tieldMapLayer.active = false;\n        this.objectsLayer.active = false;\n        this.hintLayer.active = false;\n        this.hintLayer.getComponent(cc.Label).string = \"\";\n        this.buttonLayer.active = false;\n        this.buttonLayer.getChildByName('SWITCH_J2R').active = false;\n        this.buttonLayer.getChildByName('SWITCH_R2J').active = false;\n        this.buttonLayer.getChildByName('RESTART').active = false;\n        this.smokeLayer.active = false;\n        this.node.getChildByName('endTitle').active = false\n        this.homeLayer.active = true;\n        this.homeLayer.getChildByName('menus').active = true;\n        this.homeLayer.getChildByName('levels').active = false;\n    }\n\n    initSelectLevel() {\n        if (Global.savedLevel >= 1) {\n            this.homeLayer.getChildByName('levels').getChildByName('I').getComponent(cc.Label).string = Global.config.levelsProperties[\"1\"].title;\n        }\n        if (Global.savedLevel >= 4) {\n            this.homeLayer.getChildByName('levels').getChildByName('II').getComponent(cc.Label).string = Global.config.levelsProperties[\"4\"].title;\n        }\n        if (Global.savedLevel >= 7) {\n            this.homeLayer.getChildByName('levels').getChildByName('III').getComponent(cc.Label).string = Global.config.levelsProperties[\"7\"].title;\n        }\n        if (Global.savedLevel >= 10) {\n            this.homeLayer.getChildByName('levels').getChildByName('IV').getComponent(cc.Label).string = Global.config.levelsProperties[\"10\"].title;\n        }\n        if (Global.savedLevel >= 13) {\n            this.homeLayer.getChildByName('levels').getChildByName('V').getComponent(cc.Label).string = Global.config.levelsProperties[\"13\"].title;\n        }\n        if (Global.savedLevel >= 15) {\n            this.homeLayer.getChildByName('levels').getChildByName('VI').getComponent(cc.Label).string = Global.config.levelsProperties[\"15\"].title;\n        }\n        if (Global.savedLevel >= 18) {\n            this.homeLayer.getChildByName('levels').getChildByName('VII').getComponent(cc.Label).string = Global.config.levelsProperties[\"18\"].title;\n        }\n        if (Global.savedLevel >= 19) {\n            this.homeLayer.getChildByName('levels').getChildByName('VIII').getComponent(cc.Label).string = Global.config.levelsProperties[\"19\"].title2;\n        }\n    }\n\n    bindButtonListener() {\n        this.buttonLayer.getChildByName('SWITCH_J2R').on(cc.Node.EventType.TOUCH_START, (touch: cc.Touch) => {\n            this.setActive(true, false);\n            Music.playSwitch();\n            Global.ROSIE.isControled = true;\n            Global.JOSH.isControled = false;\n            Global.JOSH.moveDirection = 0;\n        });\n\n        this.buttonLayer.getChildByName('SWITCH_R2J').on(cc.Node.EventType.TOUCH_START, (touch: cc.Touch) => {\n            this.setActive(false, true);\n            Music.playSwitch();\n            Global.ROSIE.isControled = false;\n            Global.JOSH.isControled = true;\n            Global.ROSIE.moveDirection = 0;\n        });\n\n        this.buttonLayer.getChildByName('RESTART').on(cc.Node.EventType.TOUCH_START, (touch: cc.Touch) => {\n            Global.isRestart = true;\n        });\n\n        this.buttonLayer.getChildByName('EXIT').on(cc.Node.EventType.TOUCH_START, (touch: cc.Touch) => {\n            Global.isExit = true;\n        });\n\n        this.homeLayer.getChildByName('menus').getChildByName('start').on(cc.Node.EventType.TOUCH_START, (touch: cc.Touch) => {\n            Global.levelIndex = 0;\n            this.loadScence();\n        });\n        this.homeLayer.getChildByName('menus').getChildByName('selectLevel').on(cc.Node.EventType.TOUCH_START, (touch: cc.Touch) => {\n            this.homeLayer.getChildByName('menus').active = false;\n            this.homeLayer.getChildByName('levels').active = true;\n            this.buttonLayer.active = true;\n        });\n        this.homeLayer.getChildByName('levels').getChildByName('I').on(cc.Node.EventType.TOUCH_START, (touch: cc.Touch) => {\n            if (this.homeLayer.getChildByName('levels').getChildByName('I').getComponent(cc.Label).string != \"???\") {\n                Global.levelIndex = 1;\n                this.loadScence();\n            }\n        });\n        this.homeLayer.getChildByName('levels').getChildByName('II').on(cc.Node.EventType.TOUCH_START, (touch: cc.Touch) => {\n            if (this.homeLayer.getChildByName('levels').getChildByName('II').getComponent(cc.Label).string != \"???\") {\n                Global.levelIndex = 4;\n                this.loadScence();\n            }\n        });\n        this.homeLayer.getChildByName('levels').getChildByName('III').on(cc.Node.EventType.TOUCH_START, (touch: cc.Touch) => {\n            if (this.homeLayer.getChildByName('levels').getChildByName('III').getComponent(cc.Label).string != \"???\") {\n                Global.levelIndex = 7;\n                this.loadScence();\n            }\n        });\n        this.homeLayer.getChildByName('levels').getChildByName('IV').on(cc.Node.EventType.TOUCH_START, (touch: cc.Touch) => {\n            if (this.homeLayer.getChildByName('levels').getChildByName('IV').getComponent(cc.Label).string != \"???\") {\n                Global.levelIndex = 10;\n                this.loadScence();\n            }\n        });\n        this.homeLayer.getChildByName('levels').getChildByName('V').on(cc.Node.EventType.TOUCH_START, (touch: cc.Touch) => {\n            if (this.homeLayer.getChildByName('levels').getChildByName('V').getComponent(cc.Label).string != \"???\") {\n                Global.levelIndex = 13;\n                this.loadScence();\n            }\n        });\n        this.homeLayer.getChildByName('levels').getChildByName('VI').on(cc.Node.EventType.TOUCH_START, (touch: cc.Touch) => {\n            if (this.homeLayer.getChildByName('levels').getChildByName('VI').getComponent(cc.Label).string != \"???\") {\n                Global.levelIndex = 15;\n                this.loadScence();\n            }\n        });\n        this.homeLayer.getChildByName('levels').getChildByName('VII').on(cc.Node.EventType.TOUCH_START, (touch: cc.Touch) => {\n            if (this.homeLayer.getChildByName('levels').getChildByName('VII').getComponent(cc.Label).string != \"???\") {\n                Global.levelIndex = 18;\n                this.loadScence();\n            }\n        });\n        this.homeLayer.getChildByName('levels').getChildByName('VIII').on(cc.Node.EventType.TOUCH_START, (touch: cc.Touch) => {\n            if (this.homeLayer.getChildByName('levels').getChildByName('VIII').getComponent(cc.Label).string != \"???\") {\n                Global.levelIndex = 19;\n                this.loadScence();\n            }\n        });\n    }\n\n    bindTouchListener() {\n        this.node.on(cc.Node.EventType.TOUCH_START, (touch: cc.Touch) => {\n            if (Global.JOSH && Global.ROSIE && touch.getLocationX() > this.node.width / 2) {\n                if (Global.JOSH._isControled) {\n                    Global.JOSH.jump()\n                }\n                if (Global.ROSIE._isControled) {\n                    Global.ROSIE.jump()\n                }\n            }\n        });\n        this.node.on(cc.Node.EventType.TOUCH_MOVE, (x: cc.Touch) => {\n            if (Global.JOSH && Global.ROSIE) {\n                if (x.getStartLocation().x < this.node.width / 2 &&\n                    x.getLocation().x - x.getStartLocation().x > Global.config.touchMoveThreshold) {\n                    if (Global.JOSH._isControled) {\n                        Global.JOSH.moveDirection = 1;\n                    }\n                    if (Global.ROSIE._isControled) {\n                        Global.ROSIE.moveDirection = 1;\n                    }\n                } else if (\n                    x.getStartLocation().x < this.node.width / 2 &&\n                    x.getLocation().x - x.getStartLocation().x < -Global.config.touchMoveThreshold) {\n                    if (Global.JOSH._isControled) {\n                        Global.JOSH.moveDirection = -1;\n                    }\n                    if (Global.ROSIE._isControled) {\n                        Global.ROSIE.moveDirection = -1;\n                    }\n                } else {\n                    if (Global.JOSH._isControled) {\n                        Global.JOSH.moveDirection = 0;\n                    }\n                    if (Global.ROSIE._isControled) {\n                        Global.ROSIE.moveDirection = 0;\n                    }\n                }\n            }\n        });\n        this.node.on(cc.Node.EventType.TOUCH_END, (x: cc.Touch) => {\n            if (Global.JOSH && Global.JOSH._isControled) {\n                Global.JOSH.moveDirection = 0;\n            }\n            if (Global.ROSIE && Global.ROSIE._isControled) {\n                Global.ROSIE.moveDirection = 0;\n            }\n        });\n        this.node.on(cc.Node.EventType.TOUCH_CANCEL, (x: cc.Touch) => {\n            if (Global.JOSH && Global.JOSH._isControled) {\n                Global.JOSH.moveDirection = 0;\n            }\n            if (Global.ROSIE && Global.ROSIE._isControled) {\n                Global.ROSIE.moveDirection = 0;\n            }\n        });\n        // for computer\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, (x) => {\n            if (Global.isDebug) {\n                if (x.keyCode == cc.macro.KEY.space) {\n                    Global.levelIndex++;\n                    if (Global.levelIndex > 19) {\n                        Global.levelIndex = 0;\n                    }\n                    this.loadScence();\n                }\n            }\n            if (x.keyCode == cc.macro.KEY.w) {\n                if (Global.JOSH._isControled) {\n                    Global.JOSH.jump()\n                }\n                if (Global.ROSIE._isControled) {\n                    Global.ROSIE.jump()\n                }\n            }\n            if (x.keyCode == cc.macro.KEY.a) {\n                if (Global.JOSH._isControled) {\n                    Global.JOSH.moveDirection = -1;\n                }\n                if (Global.ROSIE._isControled) {\n                    Global.ROSIE.moveDirection = -1;\n                }\n            }\n            if (x.keyCode == cc.macro.KEY.d) {\n                if (Global.JOSH._isControled) {\n                    Global.JOSH.moveDirection = 1;\n                }\n                if (Global.ROSIE._isControled) {\n                    Global.ROSIE.moveDirection = 1;\n                }\n            }\n        });\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, (x) => {\n            if (x.keyCode == cc.macro.KEY.a || x.keyCode == cc.macro.KEY.d) {\n                if (Global.JOSH._isControled) {\n                    Global.JOSH.moveDirection = 0;\n                }\n                if (Global.ROSIE._isControled) {\n                    Global.ROSIE.moveDirection = 0;\n                }\n            }\n        });\n    }\n\n    loadScence(isReload = false) {\n        this.homeLayer.active = false;\n        if (!isReload) {\n            this.unscheduleAllCallbacks();\n            this.windowLights = [];\n            this.lampLights = [];\n            this.tieldMapLayer.destroyAllChildren();\n        }\n        this.objectsLayer.destroyAllChildren();\n        this.heartNode.active = false;\n\n        cc.loader.loadRes('Maps/' + Global.config.levelsProperties[Global.levelIndex].map, (err, jsonMap) => {\n            if (err) {\n                console.log(err);\n            }\n            this.loadObjects(jsonMap);\n            if (!isReload) {\n                this.initEnvironment();\n                this.loadFloors(jsonMap);\n                this.makeHouses(jsonMap);\n                this.makeHills(jsonMap);\n                this.makeTrees(jsonMap);\n                this.makeGarbageCans(jsonMap);\n                this.makeLamps(jsonMap);\n                this.loadTiledMaps(jsonMap);\n                this.schedule(this.updateWindowLights, 0.125);\n                this.schedule(this.updateLampLights, 0.125);\n                Music.playBGM(Global.config.levelsProperties[Global.levelIndex][\"bgm\"]);\n            }\n\n            switch (Global.levelIndex) {\n                case 0:\n                    //tutorial\n                    this.buttonLayer.getChildByName('SWITCH_R2J').active = false\n                    this.buttonLayer.getChildByName('RESTART').active = false;\n                    Global.JOSH.isControled = true;\n                    if (!isReload) {\n                        Global.tutorialState.init();\n                    }\n                    this.buttonLayer.getChildByName('SWITCH_J2R').active = Global.tutorialState.sawRosie\n                    Global.ROSIE.node.active = Global.tutorialState.sawRosie;\n\n                    if (!isReload) {\n                        Global.JOSH.canJump = false;\n                        this.hintLayer.getComponent(cc.Label).string = \"2022年，我只身来到了新的国度\";\n                    }\n                    break;\n                case 1:\n                    this.hintLayer.getComponent(cc.Label).string = \"我提醒自己，不要从太高处掉落\";\n                    this.buttonLayer.getChildByName('RESTART').active = true\n                    this.buttonLayer.getChildByName('SWITCH_J2R').active = true\n                    this.buttonLayer.getChildByName('SWITCH_R2J').active = false\n                    Global.JOSH.isControled = true;\n                    break;\n                case 2:\n                case 3:\n                    this.hintLayer.getComponent(cc.Label).string = \"\";\n                    this.buttonLayer.getChildByName('RESTART').active = true\n                    this.buttonLayer.getChildByName('SWITCH_J2R').active = true\n                    this.buttonLayer.getChildByName('SWITCH_R2J').active = false\n                    Global.JOSH.isControled = true;\n                    break;\n                case 4:\n                case 5:\n                case 6:\n                    //when she saw me she ran to me\n                    Global.JOSH.isControled = true;\n                    Global.ROSIE.isControled = false;\n                    Global.ROSIE.speedX = 48;\n                    this.buttonLayer.getChildByName('RESTART').active = true\n                    this.buttonLayer.getChildByName('SWITCH_J2R').active = false\n                    this.buttonLayer.getChildByName('SWITCH_R2J').active = false\n                    break;\n                case 7:\n                case 8:\n                case 9:\n                    //walk together\n                    this.buttonLayer.getChildByName('RESTART').active = true\n                    //console.log(Global.ROSIE.speedX)\n                    Global.JOSH.isControled = true;\n                    Global.ROSIE.isControled = true;\n                    break;\n                case 10:\n                case 11:\n                case 12:\n                    //different views\n                    this.buttonLayer.getChildByName('RESTART').active = true\n                    Global.JOSH.isControled = true;\n                    Global.ROSIE.isControled = true;\n                    Global.ROSIE.dir = -1;\n                    break;\n                case 13:\n                case 14:\n                    //run away\n                    this.buttonLayer.getChildByName('RESTART').active = true\n                    Global.JOSH.isControled = true;\n                    Global.ROSIE.isControled = false;\n                    Global.ROSIE.moveDirection = 1;\n                    Global.ROSIE.dir = 1;\n                    Global.ROSIE.speedX = 48;\n                    break;\n                case 15:\n                case 16:\n                case 17:\n                    //josh cant jump\n                    this.buttonLayer.getChildByName('RESTART').active = true\n                    this.buttonLayer.getChildByName('SWITCH_J2R').active = true\n                    this.buttonLayer.getChildByName('SWITCH_R2J').active = false\n                    Global.JOSH.isControled = true;\n                    Global.ROSIE.isControled = false;\n                    Global.JOSH.canJump = false;\n                    break;\n                case 18:\n                    //light off\n                    this.buttonLayer.getChildByName('RESTART').active = true\n                    this.buttonLayer.getChildByName('SWITCH_J2R').active = true\n                    this.buttonLayer.getChildByName('SWITCH_R2J').active = false\n                    Global.JOSH.isControled = true;\n                    Global.ROSIE.isControled = false;\n                    Global.JOSH.canJump = true;\n                    break;\n                case 19:\n                    //end level\n                    this.buttonLayer.getChildByName('RESTART').active = true\n                    this.buttonLayer.getChildByName('SWITCH_J2R').active = false\n                    this.buttonLayer.getChildByName('SWITCH_R2J').active = false\n                    Global.ROSIE.isControled = true;\n                    Global.JOSH.isControled = false;\n                    Global.JOSH.node.scaleX = -1;\n                    break;\n            }\n        });\n\n        if (!isReload) {\n            if ([0, 1, 4, 7, 10, 13, 15, 18, 19].indexOf(Global.levelIndex) >= 0) {\n                this.tieldMapLayer.active = false;\n                this.objectsLayer.active = false;\n                this.hintLayer.active = false;\n                this.buttonLayer.active = false;\n                this.node.getChildByName('endTitle').active = false\n                if (Global.levelIndex != 19) {\n                    this.smokeLayer.getComponent(Smoke).show(Global.levelIndex).then(() => {\n                        this.tieldMapLayer.active = true;\n                        this.objectsLayer.active = true;\n                        this.hintLayer.active = true;\n                        this.buttonLayer.active = true;\n                        this.smokeLayer.active = false;\n                    })\n                } else {\n                    this.smokeLayer.getComponent(Smoke).show(19.1).then(() => {\n                        this.smokeLayer.getComponent(Smoke).show(19.2).then(() => {\n                            this.tieldMapLayer.active = true;\n                            this.objectsLayer.active = true;\n                            this.hintLayer.active = true;\n                            this.buttonLayer.active = true;\n                            this.smokeLayer.active = false;\n                            this.node.getChildByName('endTitle').active = true\n                            this.node.getChildByName('endTitle').children.forEach(x => {\n                                x.getComponent(EndLevel).init()\n                            })\n                        });\n                    })\n                }\n            }\n        } else if (Global.levelIndex == 19) {\n            this.node.getChildByName('endTitle').children.forEach(x => {\n                x.getComponent(EndLevel).init()\n            })\n        }\n    }\n\n    initEnvironment() {\n        let weather = Global.config.levelsProperties[Global.levelIndex].weather;\n        this.buildFrame(Global.WEATHERS[weather], null, Global.config.weatherProperties[weather].WEATHER, 'weather')\n        this.buildFrame(Global.WEATHERS[\"SHADING\"], null, Global.config.weatherProperties[weather].SHADING, 'shading')\n        this.buildFrame(Global.WEATHERS[\"TEX\"], null, Global.config.weatherProperties[weather].TEX, 'tex')\n    }\n\n    initHeart() {\n        this.heartNode = new cc.Node();\n        this.heartNode.active = false;\n        this.heartNode.addComponent(cc.Sprite);\n        var anim = this.heartNode.addComponent(cc.Animation);\n        anim.addClip(Global.ANIMATIONS.HEART, 'heart');\n        this.node.addChild(this.heartNode);\n    }\n\n    loadFloors(jsonMap: cc.JsonAsset) {\n        var floors = jsonMap.json.floors.rect;\n        for (const rect of floors) {\n            var node = new cc.Node();\n            node.setPosition(rect.x + rect.w / 2, -rect.h / 2 - rect.y);\n            node.width = rect.w;\n            node.height = rect.h;\n            node.addComponent(Floor);\n            this.tieldMapLayer.addChild(node);\n        }\n    }\n\n    loadTiledMaps(jsonMap: cc.JsonAsset) {\n        var maps = jsonMap.json.Maps.TILESET;\n        for (const tile of maps) {\n            var frame = new cc.SpriteFrame(Global.TILESET);\n            frame.setRect(cc.rect(tile.tx, tile.ty, 32, 32));\n            this.buildFrame(frame, tile, 255, 'tieldMap');\n        }\n    }\n\n    makeTrees(jsonMap: cc.JsonAsset) {\n        for (let i = 0; i < 3; i++) {\n            if (jsonMap.json.Backgrounds.hasOwnProperty(\"tree\" + i)) {\n                const positions = jsonMap.json.Backgrounds[\"tree\" + i];\n                //console.log('got tree' + i + \" in \" + positions.length + \"places\")\n                for (const p of positions) {\n                    //console.log(Global.BACKGROUNDS[\"tree\" + i])\n                    this.buildFrame(Global.BACKGROUNDS[\"tree\" + i], p, 255, 'tree');\n                    let suffix = \"\";\n                    switch (Global.config.levelsProperties[Global.levelIndex].season) {\n                        case 'DEFAULT':\n                            suffix = \"_leaves\";\n                            break;\n                        case 'AUTUMN':\n                            suffix = \"_leaves_color\";\n                            break;\n                        case 'WINTER':\n                            suffix = \"_snow\";\n                            break;\n                    }\n                    this.buildFrame(Global.BACKGROUNDS[\"tree\" + i + suffix], p, 255, 'tree_suffix');\n                }\n            }\n        }\n    }\n\n    makeHills(jsonMap: cc.JsonAsset) {\n        for (let i = 0; i < 2; i++) {\n            if (jsonMap.json.Backgrounds.hasOwnProperty(\"hill\" + i)) {\n                const positions = jsonMap.json.Backgrounds[\"hill\" + i];\n                for (const p of positions) {\n                    this.buildFrame(Global.BACKGROUNDS[\"hill\" + i], p, 255, 'hill');\n                    if (Global.config.levelsProperties[Global.levelIndex].season == \"WINTER\") {\n                        this.buildFrame(Global.BACKGROUNDS[\"hill\" + i + \"_snow\"], p, 255, 'hill_snow');\n                    }\n                    ;\n                }\n            }\n        }\n    }\n\n    makeGarbageCans(jsonMap: cc.JsonAsset) {\n        if (jsonMap.json.Backgrounds.hasOwnProperty(\"can\")) {\n            const positions = jsonMap.json.Backgrounds[\"can\"];\n            for (const p of positions) {\n                this.buildFrame(Global.BACKGROUNDS[\"can\"], p, 255, 'can');\n                if (Global.config.levelsProperties[Global.levelIndex].season == \"WINTER\") {\n                    this.buildFrame(Global.BACKGROUNDS[\"can_snow\"], p, 255, 'can_snow');\n                }\n                ;\n            }\n        }\n    }\n\n    makeLamps(jsonMap: cc.JsonAsset) {\n        if (jsonMap.json.Backgrounds.hasOwnProperty(\"lamp\")) {\n            const positions = jsonMap.json.Backgrounds[\"lamp\"];\n            for (const p of positions) {\n                this.buildFrame(Global.BACKGROUNDS[\"lamp\"], p, 255, 'lamp');\n                if (Global.config.levelsProperties[Global.levelIndex].season == \"WINTER\") {\n                    this.buildFrame(Global.BACKGROUNDS[\"lamp_snow\"], p, 255, 'lamp_snow');\n                }\n                ;\n                let node = new cc.Node();\n                node.anchorX = 0;\n                node.anchorY = 1;\n                node.setPosition(p.x - 44, 41 - p.y);\n                node.addComponent(cc.Sprite).spriteFrame =\n                    Global.config.levelsProperties[Global.levelIndex].weather == \"TWILIGHT\" ?\n                        Global.BACKGROUNDS[\"lamp_light_white\"] : Global.BACKGROUNDS[\"lamp_light\"];\n                node.opacity = 128;\n                this.lampLights.push(node);\n                this.tieldMapLayer.addChild(node, Global.config.zIndex['lamp_light']);\n            }\n        }\n    }\n\n    makeHouses(jsonMap: cc.JsonAsset) {\n        for (let i = 0; i < 3; i++) {\n            if (jsonMap.json.Backgrounds.hasOwnProperty(\"house\" + i)) {\n                const positions = jsonMap.json.Backgrounds[\"house\" + i];\n                for (const p of positions) {\n                    this.buildFrame(Global.BACKGROUNDS[\"house\" + i], p, 64, 'house');\n                    this.buildFrame(Global.BACKGROUNDS[\"house\" + i + \"_light\"], p, 128, 'house_light');\n                    for (const iterator of Global.config.windowOffsetByHouse[i]) {\n                        var node = new cc.Node();\n                        node.anchorX = 0;\n                        node.anchorY = 1;\n                        node.setPosition(p.x + iterator[1], -(p.y + iterator[2]));\n                        node.addComponent(cc.Sprite).spriteFrame = Global.BACKGROUNDS[\"window_light\" + iterator[0]];\n                        node.opacity = 128;\n                        node.active = false;\n                        this.windowLights.push(node);\n                        this.tieldMapLayer.addChild(node, Global.config.zIndex['house_light']);\n                    }\n                }\n            }\n        }\n    }\n\n    updateWindowLights() {\n        let num = Math.floor(Math.random() * 6);\n        while (num > 0) {\n            let light = this.windowLights[Math.floor(Math.random() * this.windowLights.length)];\n            light.active = !light.active\n            num--;\n        }\n    }\n\n    updateLampLights() {\n        this.lampLightTime += 1;\n        if (this.lampLightTime >= 32) {\n            this.lampLightTime = 0;\n        }\n        //console.log(t)\n        this.lampLights.forEach(x => {\n            x.opacity = 96 + 32 * Math.cos(this.lampLightTime / 16 * Math.PI)\n        })\n    }\n\n    buildFrame(frame: cc.SpriteFrame, position: any = null, opacity: number = 255, name: string = null) {\n        var node = new cc.Node();\n        node.anchorX = 0;\n        node.anchorY = 1;\n        if (position) {\n            node.setPosition(position.x, -position.y);\n        }\n        node.addComponent(cc.Sprite).spriteFrame = frame;\n        node.opacity = opacity;\n        this.tieldMapLayer.addChild(node, Global.config.zIndex[name]);\n    }\n\n    loadObjects(jsonMap: cc.JsonAsset) {\n        var objs = jsonMap.json.Objects;\n        for (const objName in objs) {\n            if (objs.hasOwnProperty(objName)) {\n                const obj = objs[objName];\n                switch (objName) {\n                    case \"JOSH\":\n                    case \"ROSIE\":\n                        var node = new cc.Node();\n                        node.setPosition(obj.x + 16, -16 - obj.y);\n                        node.addComponent(cc.Sprite);\n                        node.opacity = 127\n                        var anim = node.addComponent(cc.Animation);\n                        for (const key in Global.ANIMATIONS[objName]) {\n                            if (Global.ANIMATIONS[objName].hasOwnProperty(key)) {\n                                anim.addClip(Global.ANIMATIONS[objName][key], key);\n                            }\n                        }\n                        var box = node.addComponent(Player);\n                        box.playerName = objName;\n                        Global[objName] = box;\n                        this.objectsLayer.addChild(node, Global.config.zIndex['player']);\n                        break;\n                    case \"CRATE\":\n                        for (const position of obj) {\n                            var node = new cc.Node();\n                            node.setPosition(position.x + 16, -16 - position.y);\n                            //console.log(Global.OBJECTS[\"CRATE\"])\n                            node.addComponent(cc.Sprite).spriteFrame = Global.OBJECTS[\"CRATE\"];\n                            node.addComponent(Crate)\n                            this.objectsLayer.addChild(node, Global.config.zIndex[\"crate\"]);\n                        }\n                        break;\n                    case \"SPIKES\":\n                        for (const position of obj) {\n                            var node = new cc.Node();\n                            node.setPosition(position.x + 16, -16 - position.y);\n                            node.addComponent(cc.Sprite).spriteFrame = Global.OBJECTS[\"SPIKES\"];\n                            node.addComponent(Spike)\n                            this.objectsLayer.addChild(node, Global.config.zIndex[\"spike\"]);\n                        }\n                        break;\n                    default:\n                        console.log('unknown obj ', objName);\n                        break;\n                }\n            }\n        }\n    }\n}\n","import Global from '../Global'\n\nexport default class Music {\n\n    static musicStatus = {\n        BGM: { id: undefined, name: undefined },\n        JOSH: { id: undefined, name: undefined },\n        ROSIE: { id: undefined, name: undefined },\n        STONE: { id: undefined }\n    }\n\n    static playBGM(bgm: string) {\n        bgm = bgm || Global.defaultBGM\n        //console.log(bgm)\n        if (this.musicStatus.BGM[\"name\"] == bgm) {\n            return;\n        }\n        let id = cc.audioEngine.playMusic(Global.BGM[bgm], true);\n        this.musicStatus.BGM[\"id\"] = id;\n        this.musicStatus.BGM[\"name\"] = bgm;\n    }\n\n    static playJump(player: string) {\n        cc.audioEngine.play(Global.SFX[\"JUMP_\" + player], false, 0.5);\n    }\n\n    static playDie(player: string) {\n        cc.audioEngine.play(Global.SFX[\"DIE_\" + player], false, 0.25);\n    }\n\n    static playLandStone() {\n        cc.audioEngine.play(Global.SFX[\"LAND_STONE\"], false, 0.25);\n    }\n\n    static playLandPlayer(player: string) {\n        cc.audioEngine.play(Global.SFX[\"LAND_\" + player], false, 0.5);\n    }\n\n\n\n    static playKiss() {\n        cc.audioEngine.play(Global.SFX[\"KISS\"], false, 0.25);\n    }\n\n    static playSwitch() {\n        cc.audioEngine.play(Global.SFX[\"SWITCH\"], false, 0.25);\n    }\n\n    static playMove(player: string) {\n        if (cc.audioEngine.getState(this.musicStatus[player][\"id\"]) == cc.audioEngine.AudioState.PLAYING) {\n            return;\n        }\n        if (this.musicStatus[player][\"name\"] == \"MOVE1\") {\n            let id = cc.audioEngine.play(Global.SFX[\"MOVE2_\" + player], false, 0.5);\n            this.musicStatus[player][\"id\"] = id;\n            this.musicStatus[player][\"name\"] = \"MOVE2\";\n        } else {\n            let id = cc.audioEngine.play(Global.SFX[\"MOVE1_\" + player], false, 0.5);\n            this.musicStatus[player][\"id\"] = id;\n            this.musicStatus[player][\"name\"] = \"MOVE1\";\n        }\n    }\n}\n","import Music from \"../Utils/Music\";\nimport Global from \"../Global\";\nimport Crate from \"./Crate\";\n\nconst { ccclass, property } = cc._decorator;\n@ccclass\nexport default class Player extends cc.BoxCollider {\n    playerName;\n    _isControled: boolean;\n    moveDirection: number = 0; //0 for stand, 1 for right ,-1 for left\n    collisionDirectionX: number = 0; //0 for no collision, 1 for collider on right ,-1 for left\n    collisionRemain: number = 0;\n    speedX: number = 128; // right for positive\n    speedY: number = 0; // up for positive\n    maxSpeedY: number = 512;\n    gravity: number = 780;\n    onGround: boolean = true;\n    dead: boolean = false;\n    // 三格摔不死\n    jumpedY: number;\n    landedY: number;\n    dir = 1; //1为正向 -1为反向\n    canJump: boolean = true\n    pushedCrate: Crate\n\n    set isControled(value: boolean) {\n        if (!this.dead) {\n            this._isControled = value;\n            if (value) {\n                this.node.opacity = 255;\n            } else {\n                this.node.opacity = 127;\n            }\n        }\n    }\n\n    get isControled(): boolean {\n        return this._isControled;\n    }\n\n    start() {\n        this.size = cc.size(16, 24);\n        this.offset = cc.v2(0, -4);\n        this.tag = 1;\n    }\n\n    jump() {\n        if (this.onGround && this.canJump) {\n            this.playAnim(\"animJump\")\n            Music.playJump(this.playerName);\n            this.onGround = false;\n            this.jumpedY = this.node.y;\n            this.speedY = 300\n            if (this.pushedCrate) {\n                this.pushedCrate.moveDirection = 0;\n                if (this.moveDirection != 0) {\n                    this.collisionDirectionX = this.moveDirection\n                }\n            }\n        }\n    }\n\n    die() {\n        if (!this.dead) {\n            Global.isVictory = false;\n            this.dead = true\n            Music.playDie(this.playerName);\n            let state = this.playAnim(\"animDie\");\n            //console.log(state, this.playerName)\n            this.scheduleOnce(() => {\n                Global.isRestart = true\n            }, state.duration)\n\n            if (this == Global.JOSH && Global.levelIndex == 0) {\n                Global.tutorialState.dead = true\n            }\n        }\n    }\n\n    playAnim(animName: string): cc.AnimationState {\n        let anim = this.node.getComponent(cc.Animation);\n        if (!anim.getAnimationState(animName).isPlaying) {\n            // if (animName == 'animDie') {\n            //     console.log('animation played')\n            // }\n            return anim.play(animName)\n        }\n    }\n\n    update(dt) {\n        if (this.dead) {\n            if (this.node.opacity <= 0) {\n                // restart\n                return;\n            } else {\n                let opacity = this.node.opacity - 192 * dt\n                if (opacity < 0) {\n                    opacity = 0;\n                }\n                this.node.opacity = opacity; // die in 1.5 seconds\n                return;\n            }\n        }\n\n        if (this.moveDirection == 1 || this.moveDirection == -1) {\n            this.node.scaleX = this.moveDirection * this.dir; // turn left or right\n        }\n        //console.log(this.moveDirection)\n        if (this.onGround) {\n            //console.log(this.pushedCrate)\n            if (this.moveDirection == 1 || this.moveDirection == -1) {\n                if (this.pushedCrate) {\n                    this.playAnim(\"animPush\")\n                    if (this.pushedCrate && this.pushedCrate.onGround) {\n                        console.log(this.pushedCrate)\n                        if (this.dir * this.moveDirection == 1 && this.pushedCrate.collisionRight > 0) {\n                            //this.node.x += this.world.xMax - this.pushedCrate.world.xMin;\n                            this.collisionDirectionX = 1\n                            return;\n                        } else if (this.dir * this.moveDirection == -1 && this.pushedCrate.collisionLeft > 0) {\n                            //this.node.x += Math.abs(otherAabb.xMax - selfAabb.xMin);\n                            this.collisionDirectionX = -1\n                            return;\n                        }\n                    }\n                } else {\n                    this.playAnim(\"animWalk\");\n                }\n                if (this.dir * this.moveDirection != this.collisionDirectionX) {\n                    if (!this.pushedCrate || this.pushedCrate.onGround) {\n                        this.collisionDirectionX = 0;\n                        this.node.x += this.dir * this.moveDirection * this.speedX * dt;// translation\n                        Music.playMove(this.playerName);\n                    }\n                }\n            } else {\n                this.playAnim(\"animStand\");\n            }\n        } else {\n            if (this.speedY > 0) {\n                this.playAnim(\"animJump\");\n            }\n            else {\n                this.playAnim(\"animFall\");\n            }\n            if (Math.abs(this.speedY - this.gravity * dt) <= this.maxSpeedY) {\n                this.speedY -= this.gravity * dt;\n            } else {\n                this.speedY = -this.maxSpeedY\n            }\n            this.node.y += this.speedY * dt;\n            if (this.moveDirection != 0 && this.dir * this.moveDirection != this.collisionDirectionX) {\n                //console.log(\"I'm in\")\n                this.collisionDirectionX = 0;\n                this.node.x += this.dir * this.moveDirection * this.speedX * dt;// translation\n            }\n        }\n    }\n\n    onCollisionEnter(other, self) {\n        //console.log(this.collisionDirectionX)\n        switch (other.tag) {  //0:FLOOR,CRATE  1:PLAYER  2:SPIKE\n            case 0:\n                this.collisionRemain += 1\n                var selfAabb = self.world.aabb;\n                var selfPreAabb = self.world.preAabb.clone();\n                var otherAabb = other.world.aabb;\n                var otherPreAabb = other.world.preAabb.clone();\n                if (selfPreAabb.x == 0\n                    && selfPreAabb.y == 0\n                    && selfPreAabb.width == 0\n                    && selfPreAabb.height == 0) {\n                    return;\n                }\n                if (other instanceof Crate && other.onGround == false\n                    && selfPreAabb.yMax < otherPreAabb.yMin) {\n                    this.die();\n                    return;\n                }\n                //console.log(selfPreAabb.xMax);\n                selfPreAabb.x = selfAabb.x\n                if (cc.Intersection.rectRect(selfPreAabb, otherAabb)) //collision occurs on x-axis\n                {\n                    console.log(\"collision occurs on x-axis\")\n                    selfPreAabb.x = self.world.preAabb.x\n                    if (this.dir * this.moveDirection < 0 && (selfPreAabb.xMin > otherAabb.xMax) && (selfAabb.yMin < otherAabb.yMax)) {\n                        this.node.x += Math.abs(otherAabb.xMax - selfAabb.xMin);\n                        if (other instanceof Crate) {\n                            other.moveDirection = this.dir * this.moveDirection;\n                            other.speedX = this.speedX\n                            this.collisionDirectionX = other.collisionLeft > 0 ? -1 : 0;\n                            this.pushedCrate = other\n                            console.log('193')\n                        } else {\n                            this.collisionDirectionX = -1;\n                            this.pushedCrate = null;\n                            //console.log('撞左边墙197')\n                        }\n                    }\n                    else if (this.dir * this.moveDirection > 0 && (selfPreAabb.xMax < otherAabb.xMin) && (selfAabb.yMin < otherAabb.yMax)) {\n                        //console.log(other)\n                        this.node.x -= Math.abs(selfAabb.xMax - otherAabb.xMin);\n                        if (other instanceof Crate) {\n                            other.moveDirection = this.dir * this.moveDirection;\n                            other.speedX = this.speedX\n                            this.collisionDirectionX = other.collisionRight > 0 ? 1 : 0;\n                            this.pushedCrate = other;\n                            console.log('208')\n                        } else {\n                            this.collisionDirectionX = 1;\n                            this.pushedCrate = null;\n                            //console.log('撞右边墙212')\n                        }\n                    }\n                } else {\n                    selfPreAabb.x = self.world.preAabb.x\n                    if (selfPreAabb.xMin >= otherAabb.xMax || selfAabb.xMin >= otherAabb.xMax) {\n                        //console.log(\"撞左边墙-从空\")\n                        this.node.x += Math.abs(otherAabb.xMax - selfAabb.xMin);\n                        this.collisionDirectionX = -1\n                    } else if (selfPreAabb.xMax <= otherAabb.xMin || selfAabb.xMax <= otherAabb.xMin) {\n                        //console.log(\"撞右边墙-从空\")\n                        this.node.x -= Math.abs(selfAabb.xMax - otherAabb.xMin);\n                        this.collisionDirectionX = 1\n                    } else if (this.speedY > 0 && (selfPreAabb.yMax < otherAabb.yMin)) {\n                        //console.log('头顶撞墙')\n                        this.node.y += Math.abs(selfAabb.yMax - otherAabb.yMin);\n                        this.speedY = 0\n                    }\n                    else if (this.speedY < 0 && (selfPreAabb.yMin > otherAabb.yMax)) {\n                        //console.log('落地')\n                        this.node.y += Math.abs(otherAabb.yMax - selfAabb.yMin);\n                        this.onGround = true;\n                        this.speedY = 0\n                        if (this.jumpedY - this.node.y > 112) {\n                            //3*32是96，再加16\n                            this.die();\n                        } else {\n                            Music.playLandPlayer(this.playerName);\n                        }\n                        if (other instanceof Crate) {\n                            other.loadedObject.push(this)\n                        }\n                    }\n                }\n                break;\n            case 1:\n                Global.isVictory = true;\n                break;\n            case 2:\n                this.die();\n                return;\n        }\n    }\n\n    onCollisionExit(other, self) {\n        if (other instanceof Crate) {\n            other.moveDirection = 0;\n            var index = other.loadedObject.indexOf(this)\n            if (index > -1) {\n                other.loadedObject.splice(index, 1)\n            }\n            this.pushedCrate = null;\n        }\n        switch (other.tag) {\n            case 0:\n                this.collisionRemain -= 1\n                var otherAabb = other.world.aabb;\n                var otherPreAabb = other.world.preAabb.clone();\n                var selfAabb = self.world.aabb;\n                var selfPreAabb = self.world.preAabb.clone();\n                selfPreAabb.x = selfAabb.x\n                if (!cc.Intersection.rectRect(selfPreAabb, otherAabb)) //horizental leaves\n                {\n                    //this.conllisionRemainedX -= 1\n                    //console.log(selfAabb, selfPreAabb, otherAabb)\n                    if (selfAabb.yMin == otherAabb.yMax && this.onGround == true && this.collisionRemain == 0) // 走出地面\n                    {\n                        this.onGround = false;\n                        this.jumpedY = this.node.y;\n                    }\n                } else {\n                    //vertical leaves\n                    //console.log(selfPreAabb, otherPreAabb)\n                    // if (selfPreAabb.xMax == otherAabb.xMin && this.collisionDirectionX == 1\n                    //     || selfPreAabb.xMin == otherAabb.xMax && this.collisionDirectionX == -1) {\n                    if (selfPreAabb.yMin < otherPreAabb.yMax\n                        && (selfPreAabb.xMax <= otherPreAabb.xMin || selfPreAabb.xMin >= otherPreAabb.xMax)) {\n                        //console.log('上下贴边离开障碍')\n                        if (this.collisionRemain == 0) {\n                            this.collisionDirectionX = 0;\n                        }\n                    }\n                }\n                break;\n            //console.log('onground', this.onGround)\n            case 1:\n                Global.isVictory = false;\n                break;\n        }\n    }\n}","import Global from \"./Global\";\n\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class Smoke extends cc.Component {\n\n    start() {\n        this.node.active = false\n    }\n\n    show(levelIndex: number) {\n        this.node.getChildByName('smokeSprite').getComponent(cc.Sprite).spriteFrame = Global.BACKGROUNDS['smoke' + Math.floor(Math.random() * 3)]\n        switch (levelIndex) {\n            case 0:\n            case 1:\n            case 4:\n            case 7:\n            case 10:\n            case 13:\n            case 15:\n            case 18:\n                this.node.getChildByName('titleSprite').getComponent(cc.Label).string = Global.config.levelsProperties[levelIndex].title;\n                break;\n            case 19.1:\n                this.node.getChildByName('titleSprite').getComponent(cc.Label).string = Global.config.levelsProperties[\"19\"].title1;\n                break;\n            case 19.2:\n                this.node.getChildByName('titleSprite').getComponent(cc.Label).string = Global.config.levelsProperties[\"19\"].title2;\n                break;\n        }\n        return new Promise<void>((resolve, reject) => {\n            this.node.getChildByName('smokeSprite').x = -60\n            this.node.active = true\n            this.node.runAction(cc.sequence(cc.fadeIn(1), cc.delayTime(2), cc.fadeOut(1)));\n            this.scheduleOnce(() => { resolve() }, 4)\n        })\n    }\n\n    showEnd() {\n        const text: string = \"亲爱的秀云，\\n\" +\n            \"\\n\" +\n            \"在过去的一年，我们收获了许多共同经历，\\n\" +\n            \"既一起分享过爱情的甜蜜，但也有过争吵。\\n\" +\n            \"不过最后，我们的感情都是变得越来越好。\\n\" +\n            \"我是个小心眼的人，谢谢你对我一直以来\\n\" +\n            \"的包容。愿我们携手永远走下去。\\n\" +\n            \"\\n\" +\n            \"Ich liebe dich & Alles Gute zum Geburtstag\\n\" +\n            \"Deine Zijian\"\n        this.node.getChildByName('smokeSprite').getComponent(cc.Sprite).spriteFrame = Global.BACKGROUNDS['all'];\n        this.node.getChildByName('titleSprite').getComponent(cc.Label).string = \"\"\n\n        for (let i = 0; i < text.length; i++) {\n            this.scheduleOnce(() => {\n                this.node.getChildByName('titleSprite').getComponent(cc.Label).string += text.charAt(i)\n            }, i * 0.25)\n        }\n\n        return new Promise<void>((resolve, rejuect) => {\n            this.node.getChildByName('smokeSprite').x = -60\n            this.node.active = true\n            this.node.runAction(cc.fadeIn(1))\n            this.scheduleOnce(() => { resolve() }, text.length * 0.25)\n        })\n    }\n\n    update(dt) {\n        this.node.getChildByName('smokeSprite').x += 64 * dt;\n    }\n}\n","import Player from \"./Player\";\n\nconst { ccclass, property } = cc._decorator;\n@ccclass\nexport default class Spike extends cc.BoxCollider {\n\n    start() {\n        //this.size = cc.size(this.node.width, this.node.height);\n        this.size = cc.size(32, 24);\n        this.offset = cc.v2(0, -4)\n        this.tag = 2 //0:FLOOR 1:CRATE 2:SPIKE\n    }\n\n    update() {\n        //this.col\n    }\n}"],"file":"index.js"}